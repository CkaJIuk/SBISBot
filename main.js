import { Telegraf, Markup, Scenes, session } from 'telegraf'
import SbisApi from './Services/SBISService.js'
import dotenv from 'dotenv'

//TODO: foreach –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
//TODO: —É–∫–∞–∑–∞—ã–≤–∞–µ—Ç –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞ –∞ –Ω–µ –µ–≥–æ –∏–º—è
//TODO: –ø–æ—á–µ–º—É —Ç–æ –∫–≥ –≤ unit —Ç–æ–≤–∞—Ä–∞

dotenv.config()

const mainScene = new Scenes.BaseScene('mainScene')
const pointScene = new Scenes.BaseScene('pointScene')
const orderScene = new Scenes.BaseScene('orderScene')
const cartScene = new Scenes.BaseScene('cartScene')

mainScene.enter(async ctx => ctx.reply('–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª...',
    Markup.keyboard(
        [
            ['üçª –ü—Ä–µ–¥–∑–∞–∫–∞–∑', 'üõí –ö–æ—Ä–∑–∏–Ω–∞'],
            ['üè™ –ú–∞–≥–∞–∑–∏–Ω—ã', 'üí≥ –ú–æ–∏ –∑–∞–∫–∞–∑—ã'],
            ['üéÅ –ê–∫—Ü–∏–∏', '‚ùì –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å'],
            [Markup.button.contactRequest('‚òé –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä'), '‚ùå –í—ã–π—Ç–∏']
        ])
        .resize()))

mainScene.hears('üéÅ –ê–∫—Ü–∏–∏', async ctx => {
    try { await ctx.deleteMessage() } catch (err) { }
    ctx.reply('–í –¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º–µ –Ω–µ—Ç –¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö –∞–∫—Ü–∏–π')
})

mainScene.hears('üçª –ü—Ä–µ–¥–∑–∞–∫–∞–∑', async ctx => {
    try { await ctx.deleteMessage() } catch (err) { }
    if (typeof ctx.session.u_phone == 'undefined') {
        ctx.reply('–î–ª—è –ø—Ä–µ–¥–∑–∞–∫–∞–∑–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –í—ã –º–æ–∂–µ—Ç–µ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é.');
    } else {
        await ctx.reply('–ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ...', Markup.removeKeyboard())
        ctx.scene.enter('pointScene')
    }
})

mainScene.hears('üõí –ö–æ—Ä–∑–∏–Ω–∞', async ctx => {
    if (ctx.session.cart.length !== 0)
        ctx.scene.enter('cartScene')
    else {
        try { await ctx.deleteMessage() } catch (err) { }
        await ctx.reply('–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!')
    }
})

mainScene.hears('üí≥ –ú–æ–∏ –∑–∞–∫–∞–∑—ã', async ctx => {
    try { await ctx.deleteMessage() } catch (err) { }
    let res = await api.getOrders(ctx.session.u_phone)
    if (res !== null) {
        res.forEach(async el => {
            await ctx.reply(`–ó–∞–∫–∞–∑ ‚Ññ ${res[el].orderId} —Å–æ–∑–¥–∞–Ω ${res[el].creationDate} –Ω–∞ —Å—É–º–º—É ${res[el].totalPrice}. –°—Ç–∞—Ç—É—Å: ${res[el].status}`)
        });
        ctx.reply('–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª...')
    } else {
        ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∑–¥–Ω–µ–µ.')
    }

})

mainScene.hears('üè™ –ú–∞–≥–∞–∑–∏–Ω—ã', async ctx => {
    try { await ctx.deleteMessage() } catch (err) { }
    ctx.reply('–ú—ã –∂–¥–µ–º –í–∞—Å —Å 10:00 –¥–æ 24:00 –ø–æ –∞–¥—Ä–µ—Å–∞–º: —É–ª. –ö–æ–º–∞—Ä–æ–≤–∞, –¥.10 –∏ —É–ª. –¢—É–ø–æ–ª–µ–≤–∞, –¥. 3 –±–µ–∑ –≤—ã—Ö–æ–¥–Ω—ã—Ö –∏ –ø–µ—Ä–µ—Ä—ã–≤–∞ –Ω–∞ –æ–±–µ–¥.')
})

mainScene.on('contact', async ctx => {
    ctx.session.u_phone = ctx.message.contact.phone_number
    ctx.reply('–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã')
})

mainScene.hears('‚ùì –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å', async ctx => {
    try { await ctx.deleteMessage() } catch (err) { }
    ctx.reply('–ü–æ –≤—Å–µ–º –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–º –≤–æ–ø—Ä–æ—Å–∞–º –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º –Ω–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É: chiefuu@mail.ru')
})

mainScene.hears('‚ùå –í—ã–π—Ç–∏', async ctx => {
    try { await ctx.deleteMessage() } catch (err) { }
    ctx.session.nomenclr = []
    ctx.session.cart = []
    ctx.session.salePoint = null
    ctx.session.u_phone = ''
    ctx.session.deletedMessages = []
    ctx.reply('–î–æ –≤—Å—Ç—Ä–µ—á–∏!', Markup.removeKeyboard())
})

mainScene.action(/\w*/, async ctx => {//–æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—á–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    await ctx.answerCbQuery()
})

cartScene.enter(async ctx => {
    try { await ctx.deleteMessage() } catch (err) { }
    ctx.session.deletedMessages = []
    ctx.session.deletedMessages.push((await ctx.reply('–¢–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ:')).message_id)
    showCart(ctx)
})

async function showCart(ctx) {
    let ndx = 1
    let total = 0
    for (let item in ctx.session.cart) {
        let prod = ctx.session.nomenclr.find(el => el.hierarchicalId.toString() === ctx.session.cart[item].id)
        let msg = await ctx.reply(`${ndx}. –¢–æ–≤–∞—Ä ${ctx.session.cart[item].id}, ${ctx.session.cart[item].count} ${prod.unit}, ${ctx.session.cart[item].count * prod.cost} —Ä.`,
            Markup.inlineKeyboard([
                Markup.button.callback('‚ûï', 'incItem' + item),
                Markup.button.callback('‚ûñ', 'decItem' + item),
                Markup.button.callback('‚úñÔ∏è', 'delItem' + item)
            ]))
        ndx++
        total += ctx.session.cart[item].count * prod.cost
        ctx.session.deletedMessages.push(msg.message_id)
    }
    let msg = await ctx.reply(`–ò—Ç–æ–≥–æ ${ndx - 1} –ø–æ–∑–∏—Ü–∏–π.`, Markup.removeKeyboard())
    ctx.session.deletedMessages.push(msg.message_id)
    msg = await ctx.reply(`–ö –æ–ø–ª–∞—Ç–µ ${total} —Ä.`, Markup.inlineKeyboard(
        [
            [Markup.button.callback('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏', 'continueShopping')],
            [Markup.button.callback('–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑', 'doOrder')],
            [Markup.button.callback('üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'toMainMenu')]
        ]))
    ctx.session.deletedMessages.push(msg.message_id)
}

async function deleteMessages(ctx) {
    for (let msg in ctx.session.deletedMessages)
        try { ctx.deleteMessage(ctx.session.deletedMessages[msg]) } catch (err) { }
}

cartScene.action('continueShopping', async ctx => {
    await ctx.answerCbQuery()
    await deleteMessages(ctx)
    ctx.scene.enter('orderScene')
})

cartScene.action('doOrder', async ctx => {
    await ctx.answerCbQuery()
    await deleteMessages(ctx)
    let Products = []
    let priceListId = ctx.session.salesPoints.find(el => el.id.toString() === ctx.session.salePoint).priceLists[0].id
    for (let item in ctx.session.cart) {
        let prod = ctx.session.nomenclr.find(el => el.hierarchicalId.toString() === ctx.session.cart[item].id)
        Products.push({
            id: prod.hierarchicalId,
            count: ctx.session.cart[item].count,
            cost: prod.cost
        })
    }
    let data = {
        pointId: ctx.session.salePoint,
        priceListId,
        customerName: ctx.session.userId,
        customerPhone: ctx.session.u_phone,
        Products
    }

    let { orderId } = (await api.createOrder(data)).data
    if (orderId !== null) {
        ctx.session.nomenclr = []
        ctx.session.cart = []
        await ctx.reply(`–ó–∞–∫–∞–∑ ‚Ññ ${orderId} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –í–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É –Ω–∞—à —Å–æ—Ç—Ä—É–¥–Ω–∏–∫`)
        ctx.scene.enter('mainScene')
    }
    else {
        await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∑–¥–Ω–µ–µ.')
        ctx.scene.enter('cartScene')
    }
})

cartScene.action('toMainMenu', async ctx => {
    await ctx.answerCbQuery()
    await deleteMessages(ctx)
    ctx.scene.enter('mainScene')
})

cartScene.action(/^incItem\d+$/, async ctx => {
    await ctx.answerCbQuery()
    await deleteMessages(ctx)
    let ndx = ctx.callbackQuery.data.match(/\d+$/)[0]
    ctx.session.cart[ndx].count++
    showCart(ctx)
})

cartScene.action(/^decItem\d+$/, async ctx => {
    await ctx.answerCbQuery()
    await deleteMessages(ctx)
    let ndx = ctx.callbackQuery.data.match(/\d+$/)[0]
    ctx.session.cart[ndx].count--
    if (ctx.session.cart[ndx].count === 0) ctx.session.cart.splice(ndx, 1)
    if (ctx.session.cart.length === 0) {
        await ctx.reply('–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!')
        ctx.scene.enter('mainScene')
    } else showCart(ctx)
})

cartScene.action(/^delItem\d+$/, async ctx => {
    await ctx.answerCbQuery()
    await deleteMessages(ctx)
    let ndx = ctx.callbackQuery.data.match(/\d+$/)[0]
    ctx.session.cart.splice(ndx, 1)
    if (ctx.session.cart.length === 0) {
        await ctx.reply('–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!')
        ctx.scene.enter('mainScene')
    } else showCart(ctx)
})

pointScene.enter(async ctx => {
    let res = await api.getPoints()
    if (res !== null) {
        ctx.session.salesPoints = res
        let btns = [];
        for (let i = 0; i < res.length; i++) {
            btns.push(Markup.button.callback(res[i].address.replace('–≥. –£–ª–∞–Ω-–£–¥—ç, ', ''), 'pressSalesPoints' + res[i].id.toString()))
        }
        ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å –º–∞–≥–∞–∑–∏–Ω–∞:',
            Markup.inlineKeyboard(btns)
        )
    } else {
        await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∑–¥–Ω–µ–µ.')
        ctx.scene.enter('mainScene')
    }
})

pointScene.action(/^pressSalesPoints\d+$/, pressSalesPoints)

async function pressSalesPoints(ctx) {
    await ctx.answerCbQuery()
    try { await ctx.deleteMessage() } catch (err) { }
    let ndx = ctx.callbackQuery.data.match(/\d+$/)[0]
    if (ctx.session.salePoint !== null && ctx.session.salePoint !== ndx)
        ctx.reply('–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–Ω–µ–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞. –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –±—É–¥–µ—Ç –æ—á–∏—â–µ–Ω–∞. –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –º–∞–≥–∞–∑–∏–Ω?',
            Markup.inlineKeyboard([
                Markup.button.callback('–î–∞', 'dialogYes' + ndx),
                Markup.button.callback('–ù–µ—Ç', 'dialogNo')
            ]))
    else {
        ctx.session.salePoint = ndx
        ctx.scene.enter('orderScene')
    }
}

pointScene.action(/^dialogYes\d+$/, async ctx => {
    await ctx.answerCbQuery()
    ctx.session.nomenclr = []
    ctx.session.cart = []
    ctx.session.salePoint = ctx.callbackQuery.data.match(/\d+$/)[0]
    await ctx.reply('–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.')
    ctx.scene.enter('orderScene')
})

pointScene.action('dialogNo', async ctx => {
    await ctx.answerCbQuery()
    ctx.scene.enter('orderScene')
})

orderScene.enter(async (ctx) => {
    await ctx.answerCbQuery()
    try { await ctx.deleteMessage() } catch (err) { }
    await ctx.reply('–ü–æ–ª—É—á–∞—é –æ—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤...')
    let res = await api.getNomenclature(ctx.session.salePoint, ctx.session.salesPoints.find(el => el.id.toString() === ctx.session.salePoint).priceLists[0].id)
    if (res !== null) {
        ctx.session.nomenclr = res
        showSections(ctx)
    } else {
        await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∑–¥–Ω–µ–µ.')
        ctx.scene.enter('mainScene')
    }
})

async function showSections(ctx) {
    let btns = []
    for (let item in ctx.session.nomenclr) {
        if (ctx.session.nomenclr[item]?.isParent === true)
            btns.push([Markup.button.callback(ctx.session.nomenclr[item].name, `pressSection${ctx.session.nomenclr[item].hierarchicalId.toString()}`)])
    }
    btns.push([Markup.button.callback('üõí –í –∫–æ—Ä–∑–∏–Ω—É', 'toCart')])
    btns.push([Markup.button.callback('üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'toMainMenu')])
    ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:', Markup.inlineKeyboard(btns))
}

orderScene.action(/^pressSection\d+$/, async ctx => {
    await ctx.answerCbQuery()
    try { await ctx.deleteMessage() } catch (err) { }
    let btns = []
    for (let item in ctx.session.nomenclr) {
        if (ctx.session.nomenclr[item].hierarchicalParent == ctx.callbackQuery.data.match(/\d+$/)[0])
            btns.push([Markup.button.callback(`${ctx.session.nomenclr[item].name} - ${ctx.session.nomenclr[item].cost} —Ä.`,
                `pressProduct${ctx.session.nomenclr[item].hierarchicalId.toString()}`)])
    }
    btns.push([Markup.button.callback('üõí –í –∫–æ—Ä–∑–∏–Ω—É', 'toCart')])
    btns.push([Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'goBack')])
    ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç:', Markup.inlineKeyboard(btns))
})

orderScene.action(/^pressProduct\d+$/, async ctx => {
    await ctx.answerCbQuery()
    try { await ctx.deleteMessage() } catch (err) { }
    let prodId = ctx.callbackQuery.data.match(/\d+$/)[0]
    if (!ctx.session.cart.find(el => el.id.toString() === prodId)) {
        let item = ctx.session.nomenclr.find(el => el.hierarchicalId.toString() === prodId)
        ctx.reply(`–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞. –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ ${item.unit} - ${item.cost} —Ä—É–±. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ. –í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –µ–≥–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω–µ.`,
            Markup.inlineKeyboard(
                [
                    [
                        Markup.button.callback('1', `addToCart${prodId}:1`),
                        Markup.button.callback('2', `addToCart${prodId}:2`),
                        Markup.button.callback('3', `addToCart${prodId}:3`),
                        Markup.button.callback('4', `addToCart${prodId}:4`),
                        Markup.button.callback('5', `addToCart${prodId}:5`)
                    ],
                    [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'goBack')]
                ]
            ))
    } else {
        try { await ctx.deleteMessage() } catch (err) { }
        await ctx.reply(`–¢–æ–≤–∞—Ä ${prodId} —É–∂–µ –≤ –∫–æ—Ä–∑–∏–Ω–µ`)
        showSections(ctx)
    }
})

orderScene.action(/^addToCart\d+:\d$/, async ctx => {
    await ctx.answerCbQuery()
    let reg = ctx.callbackQuery.data.match(/\d+/g)
    let prodId = reg[0]
    let prodCount = reg[1]
    ctx.session.cart.push(
        {
            id: prodId,
            count: prodCount,
            point: ctx.session.salePoint
        })
    try { await ctx.deleteMessage() } catch (err) { }
    let item = ctx.session.nomenclr.find(el => el.hierarchicalId.toString() === prodId)
    await ctx.reply(`–¢–æ–≤–∞—Ä ${prodId} –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ ${prodCount} ${item.unit} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É`)
    showSections(ctx)
})

orderScene.action('goBack', async (ctx) => {
    ctx.answerCbQuery()
    try { await ctx.deleteMessage() } catch (err) { }
    showSections(ctx)
})

orderScene.action('toMainMenu', async ctx => {
    await ctx.answerCbQuery()
    try { await ctx.deleteMessage() } catch (err) { }
    ctx.scene.enter('mainScene')
})

orderScene.action('toCart', async ctx => {
    await ctx.answerCbQuery()
    try { await ctx.deleteMessage() } catch (err) { }
    if (ctx.session.cart.length !== 0) {
        ctx.scene.enter('cartScene')
    } else {
        await ctx.reply('–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!')
        showSections(ctx)
    }
})

const bot = new Telegraf(process.env.BOT_API_TOKEN);

const stage = new Scenes.Stage([mainScene, pointScene, orderScene, cartScene])
bot.use(session(), stage.middleware())

const api = new SbisApi(process.env.SERVER, process.env.CLIENTNAME, process.env.CLIENTSECRET)

bot.start(async ctx => {
    ctx.session.nomenclr = []
    ctx.session.cart = []
    ctx.session.salePoint = null
    ctx.session.deletedMessages = []
    ctx.session.userName = ctx.message.from.first_name
    ctx.session.userId = ctx.message.from.id
    ctx.reply(`–î–æ–±—Ä—ã–π –¥–µ–Ω—å, ${ctx.session.userName}!`)
    ctx.scene.enter('mainScene');
})

bot.help(ctx => ctx.reply('–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–∞–∑–¥–µ–ª –ø–æ–º–æ—â–∏'))

await api.auth()

bot.launch()

process.once('SIGINT', () => { bot.stop('SIGINT'); console.log('–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω') })
process.once('SIGTERM', () => { bot.stop('SIGTERM'); console.log('–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω') })